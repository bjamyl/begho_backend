// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: product.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
  user_id,
  name,
  description,
  start_price,
  images,
  watchers
) VALUES (
  $1, $2, $3, $4, $5, $6
)RETURNING id, user_id, name, description, start_price, images, watchers, created_at
`

type CreateProductParams struct {
	UserID      int64    `json:"user_id"`
	Name        string   `json:"name"`
	Description string   `json:"description"`
	StartPrice  int64    `json:"start_price"`
	Images      []string `json:"images"`
	Watchers    []int64  `json:"watchers"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.StartPrice,
		pq.Array(arg.Images),
		pq.Array(arg.Watchers),
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.StartPrice,
		pq.Array(&i.Images),
		pq.Array(&i.Watchers),
		&i.CreatedAt,
	)
	return i, err
}

const getProduct = `-- name: GetProduct :one
SELECT id, user_id, name, description, start_price, images, watchers, created_at FROM products
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.StartPrice,
		pq.Array(&i.Images),
		pq.Array(&i.Watchers),
		&i.CreatedAt,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, user_id, name, description, start_price, images, watchers, created_at FROM products
LIMIT $1
OFFSET $2
`

type ListProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.StartPrice,
			pq.Array(&i.Images),
			pq.Array(&i.Watchers),
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserProducts = `-- name: ListUserProducts :many
SELECT id, user_id, name, description, start_price, images, watchers, created_at from products
WHERE user_id = $1
ORDER BY id
`

func (q *Queries) ListUserProducts(ctx context.Context, userID int64) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listUserProducts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.StartPrice,
			pq.Array(&i.Images),
			pq.Array(&i.Watchers),
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
